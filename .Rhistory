# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 3) +
coord_flip() +
labs(title = "Top 10 Most Danceable Artists (Popular Tracks Only, >50)",
x = "Artist",
y = "Average Danceability") +
theme_minimal()
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 95)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 3) +
coord_flip() +
labs(title = "Top 10 Most Danceable Artists (Popular Tracks Only, >50)",
x = "Artist",
y = "Average Danceability") +
theme_minimal()
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 3) +
coord_flip() +
labs(title = "Top 10 Most Danceable Artists (Popular Tracks Only, >50)",
x = "Artist",
y = "Average Danceability") +
theme_minimal()
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "azure") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
x = "Artist",
y = "Average Danceability") +
theme_minimal()
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2"") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
x = "Artist",
y = "Average Danceability") +
theme_minimal()
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 14))
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 10))
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 12))
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 12),
axis.text.y = element_text(size = 7)
)
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Frat Party Final Bosses (Most Danceable Artists filtered by Popular Tracks >90",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 12),
axis.text.y = element_text(size = 8)
)
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
# Filter for popular tracks
popular_tracks <- spotify |>
filter(track_popularity > 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Most Danceable Artists filtered by Popular Tracks >90 (Frat Party Final Bosses)",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 12),
axis.text.y = element_text(size = 8)
)
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
#| echo: true
#Filtered by popular tracks with scores >= 90
popular_tracks <- spotify |>
filter(track_popularity >= 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Most Danceable Artists filtered by Popular Tracks >=90 (Frat Party Final Bosses)",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 12),
axis.text.y = element_text(size = 8)
)
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
#| echo: true
#Filtered by popular tracks with scores >= 90
popular_tracks <- spotify |>
filter(track_popularity >= 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Most Danceable Artists filtered by Popular Tracks >=90 (Frat Party Final Bosses)",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 12),
axis.text.y = element_text(size = 8)
)
#| include: false
#| message: false
library(tidyverse)
#| include: false
# TidyTuesday Spotify Dataset (week 01-21-2020).
spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2020/2020-01-21/spotify_songs.csv')
#| echo: true
#Filtered by popular tracks with scores >= 90
popular_tracks <- spotify |>
filter(track_popularity >= 90)
# Top 10 artists by average danceability among popular tracks
top_danceable_popular <- popular_tracks |>
group_by(track_artist) |>
summarize(avg_danceability = mean(danceability, na.rm = TRUE),
.groups = "drop") |>
arrange(desc(avg_danceability)) |>
slice_head(n = 10)
# Plot
ggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),
y = avg_danceability)) +
geom_col(fill = "darkseagreen2") +
geom_text(aes(label = round(avg_danceability, 2)),
hjust = -.1,
size = 2) +
coord_flip() +
labs(title = "Most Danceable Artists filtered by Popular Tracks >=90 (Frat Party Final Bosses)",
x = "Artist",
y = "Average Danceability") +
theme_bw()+
theme(plot.title = element_text(size = 12),
axis.text.y = element_text(size = 8)
)
quarto render
git push origin main --force
git push origin main --force
quarto render
quarto render
install.packages("devtools")
devtools::install_github("nicholasjhorton/FederalistPapers")
devtools::install_github("Amherst-Statistics/DickinsonPoems")
library(RTextTools)
install.packages("RTextTools")
library(RTextTools)
data(NYTimes)
as_tibble(NYTimes)
#| include: false
#| message: false
#| warning: false
library(tidyverse)
library(DickinsonPoems)
#| include: false
poem_ids <- list_poems()
poems_lines <- data.frame(poem_id = poem_ids) |>
mutate(lines = map(poem_id, get_poem)) |>
tidyr::unnest_longer(lines) |>
rename(line_text = lines)
poems <- poems_lines |>
group_by(poem_id) |>
summarize(
text = str_c(line_text, collapse = " "),
n_lines = n(),
.groups = "drop"
)
tokenize <- poems |>
mutate(words = str_split(str_to_lower(text), "\\W+")) |>
unnest(words) |>
filter(words != "", !str_detect(words, "^\\d+$"))
#| echo: true
# Regular Expressions
death_regexp <- "\\b(death|die|grave|funeral|corpse|end|demise|passing)\\b"
year_regexp <- "\\b(10|11|12|13|14|15|16|17|18|19|20)\\d{2}\\b"
# LookAround (Look Behind)
after_word_my_regexp <- "(?<=\\bmy\\s)[A-Za-z']+"
poems <- poems |>
mutate(
punctuation_count = str_count(text, "[[:punct:]]"),
mentions_death = str_detect(str_to_lower(text), death_regexp),
years_found = str_extract_all(text, year_regexp),
after_word_my_regexp = str_extract(text, after_word_my_regexp)
)
poems |> select(poem_id, n_lines, punctuation_count, mentions_death, years_found, after_word_my_regexp) |> head(10)
#| echo: true
most_used_words <- tokenize |>
count(words, sort = TRUE) |>
slice_head(n = 10)
most_used_words |>
ggplot(aes(x = reorder(words, n), y = n)) +
geom_col(fill = "cornflowerblue") +
geom_text(aes(label = n),
size = 3) +
coord_flip() +
labs(
title = "Top 10 Most Frequent Words in Emily Dickinson’s Poems",
x = "Word",
y = "Number of Times Used"
) +
theme_light()
#| echo: true
ggplot(poems, aes(x = n_lines, y = punctuation_count)) +
geom_point(alpha = 0.5, color = "seagreen1") +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(
title = "Correlation Between Poem Length and Punctuation Count",
x = "Number of Lines in Poem",
y = "Frequency of Punctuation(s)"
) +
theme_light()
