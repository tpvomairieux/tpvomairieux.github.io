[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Phu’s Datascience Project",
    "section": "",
    "text": "Pomona College | Claremont, CA\nB. A in Computer Science | Aug. 2024 - May 2028"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Phu’s Datascience Project",
    "section": "",
    "text": "Pomona College | Claremont, CA\nB. A in Computer Science | Aug. 2024 - May 2028"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Phu’s Datascience Project",
    "section": "About Me",
    "text": "About Me\nHi! I’m Phu, a Sophmore at Pomona College. I’m originally from Nha Trang, Vietnam, but live in the states now (Richmond, VA). One of my greatest passions in life is music. I didn’t have the opportunity growing up, but after getting a job, I’ve been able to buy the instruments and have been learning guitar, piano, and ukulele. I’m taking voice lessons at Pomona currently! You’ll find my Spotify linked below my profile picture, if you’re interested in what music I listen to. Because music is such a big part of my life, I decided to do my TidyTuesday analyses on Eurovision and Spotify statistics. Hope you enjoy my short page!"
  },
  {
    "objectID": "dveu.html",
    "href": "dveu.html",
    "title": "Eurovision Song Contest",
    "section": "",
    "text": "The Eurovision dataset contains a filed called eurovision.csv, and is a collection of data from Eurovision contests since its inception in 1956, with the exception of the 2020 Covid Year. The dataset represents information for all contestants for each year and by round, but it is important to note that changes in the scoring system have occurred throughout different points in time.For example, semi-final rounds were not introduced until 2005. Variables include the event, the host city, the artist country of origin, their song, the points they accumulated, and their rank, among others. I listened to a lot of Eurovision classics without having known before, so it was a pleasant surprise to do an analysis of the top Eurovision countries. Sources of the TidyTuesday dataset will be provided at the bottom of the page."
  },
  {
    "objectID": "dveu.html#introduction",
    "href": "dveu.html#introduction",
    "title": "Eurovision Song Contest",
    "section": "",
    "text": "The Eurovision dataset contains a filed called eurovision.csv, and is a collection of data from Eurovision contests since its inception in 1956, with the exception of the 2020 Covid Year. The dataset represents information for all contestants for each year and by round, but it is important to note that changes in the scoring system have occurred throughout different points in time.For example, semi-final rounds were not introduced until 2005. Variables include the event, the host city, the artist country of origin, their song, the points they accumulated, and their rank, among others. I listened to a lot of Eurovision classics without having known before, so it was a pleasant surprise to do an analysis of the top Eurovision countries. Sources of the TidyTuesday dataset will be provided at the bottom of the page."
  },
  {
    "objectID": "dveu.html#code-and-graph",
    "href": "dveu.html#code-and-graph",
    "title": "Eurovision Song Contest",
    "section": "Code and Graph",
    "text": "Code and Graph\n\n# Top 10 countries by cumulative total points since 2005\ntop_countries &lt;- euro |&gt;\n  filter(year &gt;= 2005) |&gt;\n  group_by(artist_country) |&gt;\n  summarize(sum_total_points = sum(total_points, na.rm = TRUE), .groups = \"drop\") |&gt;\n  arrange(desc(sum_total_points)) |&gt;\n  slice_head(n = 10) # Cuts the list into just the top 10 countries.\n\n# Plot\nggplot(top_countries, aes(x = reorder(artist_country, sum_total_points),\n                          y = sum_total_points)) +\n  geom_col(fill = \"cornflowerblue\") + \n  geom_text(aes(label = sum_total_points),\n            hjust = -.1,\n            size = 2) +\n  coord_flip() +\n  labs(title = \"Top 10 Eurovision Countries by Total Points (2005–Present)\",\n       x = \"Country\",\n       y = \"Total Points\") +\n  theme_light()"
  },
  {
    "objectID": "dveu.html#analysis",
    "href": "dveu.html#analysis",
    "title": "Eurovision Song Contest",
    "section": "Analysis",
    "text": "Analysis\nThe horizontal bar chart shows the total Eurovision points earned by countries since 2005 (the introduction of the semi-final system, to make results more comparable to the modern contest). Sweden dominates the charts with 5669 points, followed by Ukraine with 4998 and Russia with 3977. Norway, Greece, Azerbaijan, and Moldova show solid performances in their Eurovision entries. In particular, Azerbaijan only entered the competition in 2008, so 3 years late, but is 6th in total accumulated points, with 3528– an extraordinary result.The following countries are followed by Serbia, then the Netherlands, and lastly Bulgaria, with 2945 points. Eastern European countries dominate the charts, which is surprising, given that the Eurovision “Big-Five,” all Western European countries (U.K., Spain, Germany, France, Italy) are now automatically qualified to the finals despite not scoring the highest. Perhaps, it’s time for a new “Big Five?” Or, do the countries not try as hard to score points, knowing that they are guaranteed finalists due to their financial backing of the competition? It is important to acknowledge that there have been some disbanded countries (countries that no longer exist, such as Serbia and Montenegro), or inactive countries, which affect the total accumulated score of the country (especially in a split like Serbia and Montenegro). I decided that it was better to still continue with total accumulated points compared to average points, because Serbia and Montenegro for example participated in a single contest, placed 2nd, and while is obviously an outlier, “rules” the dataset as the best country by average points."
  },
  {
    "objectID": "dveu.html#link-and-credits",
    "href": "dveu.html#link-and-credits",
    "title": "Eurovision Song Contest",
    "section": "Link and Credits",
    "text": "Link and Credits\nThe data is provided by Eurovision, and Tanya Shapiro and Bob Rudis shared methods to clean and scrape the data. The link to the dataset can be accessed here: TidyTuesday Eurovision Dataset. From https://eurovision.tv/."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello, world!\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "dvspot.html",
    "href": "dvspot.html",
    "title": "Spotify",
    "section": "",
    "text": "The Spotify dataset contains a file named spotify_songs.csv, and is a collection of thousands of songs with unique variables such as track_id, track_name, track_artist, and track_popularity, among others. One of the variables I found to be interesting and analyzeable was “danceability.” Recently, I’ve started going to some parties again, but the DJs have been playing pretty bad songs… I decided to find out the artists who produce the “best” party music using the data. Sources of the TidyTuesday dataset will be provided at the bottom of the page."
  },
  {
    "objectID": "dvspot.html#introduction",
    "href": "dvspot.html#introduction",
    "title": "Spotify",
    "section": "",
    "text": "The Spotify dataset contains a file named spotify_songs.csv, and is a collection of thousands of songs with unique variables such as track_id, track_name, track_artist, and track_popularity, among others. One of the variables I found to be interesting and analyzeable was “danceability.” Recently, I’ve started going to some parties again, but the DJs have been playing pretty bad songs… I decided to find out the artists who produce the “best” party music using the data. Sources of the TidyTuesday dataset will be provided at the bottom of the page."
  },
  {
    "objectID": "dvspot.html#code-and-graph",
    "href": "dvspot.html#code-and-graph",
    "title": "Spotify",
    "section": "Code and Graph",
    "text": "Code and Graph\n\n#Filtered by popular tracks with scores &gt;= 90\npopular_tracks &lt;- spotify |&gt;\n  filter(track_popularity &gt;= 90)\n\n# Top 10 artists by average danceability among popular tracks\ntop_danceable_popular &lt;- popular_tracks |&gt;\n  group_by(track_artist) |&gt;\n  summarize(avg_danceability = mean(danceability, na.rm = TRUE),\n            .groups = \"drop\") |&gt;\n  arrange(desc(avg_danceability)) |&gt;\n  slice_head(n = 10)\n\n# Plot\nggplot(top_danceable_popular, aes(x = reorder(track_artist, avg_danceability),\n                                  y = avg_danceability)) +\n  geom_col(fill = \"darkseagreen2\") +\n  geom_text(aes(label = round(avg_danceability, 2)),\n            hjust = -.1,\n            size = 2) +\n  coord_flip() +\n  labs(title = \"Most Danceable Artists filtered by Popular Tracks &gt;=90 (Frat Party Final Bosses)\",\n       x = \"Artist\",\n       y = \"Average Danceability\") +\n  theme_light()+\n  theme(plot.title = element_text(size = 12),\n        axis.text.y = element_text(size = 8)\n        )"
  },
  {
    "objectID": "dvspot.html#analysis",
    "href": "dvspot.html#analysis",
    "title": "Spotify",
    "section": "Analysis",
    "text": "Analysis\nInfluenced by party music, I created a horizontal bar chart to show the top 10 artists with tracks that have the highest average danceability. A score of 0 would represent undanceable, and a score of 1 to be extremely danceable. I decided to sort songs by popularities of greater than or equal to 90, because the song has to be “relevant” enough for a college to know and be able to vibe/dance to. Roddy Rich tops the list with the highest average danceability of 0.90 –he’s followed by artists like Dimelo Flow, Lil Uzi Vert, Regard, Rauw Alejandro, and Lil Nas X, with their scores at around 0.90. The above artists are Hip/Hop creators, Reggaeton singers, and DJs, which make sense– the cultural background of the music they create has a strong history of dance and high energy levels. Next, Y2K scored 0.84, Ed Sheeran scored 0.82, Tones and I 0.82, and Nicky Jam 0.82. The results suggest that among mainstream artists, hip-hop, reggaeton, and pop crossovers tend to dominate in term of danceable tracks. It’s important to note that filtering an artist by their top hits only may not accurately represent their music’s danceability. For example, Ed Sheeran has a lot of indie music on top of his pop hits, however, as they aren’t as relevant, the popularity filter does not account for the danceability of those tracks, increasing his score. However, I believe that the parameters still give us a good way to analyze which artists we should be playing to dance. So, the next time I go to a party, or high-octane social event, I better hear one of these artists! Or, we’ll just get some 2010s house again…"
  },
  {
    "objectID": "dvspot.html#link-and-credits",
    "href": "dvspot.html#link-and-credits",
    "title": "Spotify",
    "section": "Link and Credits",
    "text": "Link and Credits\nThe data comes from Spotify via the spotifyr package, authored by Charlie Thompson, Josiah Parry, Donal Phipps, and Tom Wolff. The link to the dataset can be accessed here: TidyTuesday Spotify Dataset. From https://open.spotify.com/."
  },
  {
    "objectID": "p1.html",
    "href": "p1.html",
    "title": "Sample of Piano",
    "section": "",
    "text": "Here’s a short clip of me learning a song on the piano! Hidekazu Sakamoto’s コウを追いかけて.\n\n\nYour browser does not support the video tag."
  },
  {
    "objectID": "Dickinson.html",
    "href": "Dickinson.html",
    "title": "Emily Dickinson Poems",
    "section": "",
    "text": "For this week’s project, I decided to do a full-text analysis from a collection of all of Emily Dickinson’s poems, transcribed by Jim Tinsley and made freely available on the Gutenberg project. In my analysis, I use 6 str_*() functions, those being str_count(), str_detect(), str_to_lower(), str_split(), str_extract(), and str_extract_all(). The lookaround I use is a lookbehind. I use 4 regular expressions – 1) to detect whether or not a poem contains death related words, 2) to extract any “year-like” number (4-digits), 3) during the lookbehind, and 4) to count the number of punctuation Dickinson uses. My two plots include one that graphs the top 10 most frequent words in Dickinson poems, and the second being an analysis of poem length to punctuation count– which, we should see, that the longer the poem length, the more punctuation it features."
  },
  {
    "objectID": "Dickinson.html#introduction",
    "href": "Dickinson.html#introduction",
    "title": "Emily Dickinson Poems",
    "section": "",
    "text": "For this week’s project, I decided to do a full-text analysis from a collection of all of Emily Dickinson’s poems, transcribed by Jim Tinsley and made freely available on the Gutenberg project. In my analysis, I use 6 str_*() functions, those being str_count(), str_detect(), str_to_lower(), str_split(), str_extract(), and str_extract_all(). The lookaround I use is a lookbehind. I use 4 regular expressions – 1) to detect whether or not a poem contains death related words, 2) to extract any “year-like” number (4-digits), 3) during the lookbehind, and 4) to count the number of punctuation Dickinson uses. My two plots include one that graphs the top 10 most frequent words in Dickinson poems, and the second being an analysis of poem length to punctuation count– which, we should see, that the longer the poem length, the more punctuation it features."
  },
  {
    "objectID": "Dickinson.html#data-source",
    "href": "Dickinson.html#data-source",
    "title": "Emily Dickinson Poems",
    "section": "Data Source",
    "text": "Data Source\nThe data of the Emily Dickinson Poems come from the Amherst-Statistics/DickinsonPoems GitHub repository, created by Nicholas Horton (reachable at nicholasjhorton@gmail.com), which includes transcriptions of Dickinson’s poems in the DickinsonPoems package. The link to the GitHub repo can be accessed via the following: Github.The dataset comes from Project Gutenberg, which is an e-Library of over 75,000 eBooks. The author of the poems, is, well, Emily Dickinson, and the transcriptions were produced by Jim Tinsley, who can be contacted at jtinsley@pobox.com. These poems can be accesed here: Gutenberg."
  },
  {
    "objectID": "Dickinson.html#code",
    "href": "Dickinson.html#code",
    "title": "Emily Dickinson Poems",
    "section": "Code",
    "text": "Code\n\n# Regular Expressions\n\ndeath_regexp &lt;- \"\\\\b(death|die|grave|funeral|corpse|end|demise|passing)\\\\b\"\n\nyear_regexp &lt;- \"\\\\b(10|11|12|13|14|15|16|17|18|19|20)\\\\d{2}\\\\b\"\n\n# LookAround (Look Behind)\n\nafter_word_my_regexp &lt;- \"(?&lt;=\\\\bmy\\\\s)[A-Za-z']+\"\n\npoems &lt;- poems |&gt;\n  mutate(\n    \n    punctuation_count = str_count(text, \"[[:punct:]]\"),\n    mentions_death = str_detect(str_to_lower(text), death_regexp),\n    years_found = str_extract_all(text, year_regexp),\n    after_word_my_regexp = str_extract(text, after_word_my_regexp)\n          \n  )\n\npoems |&gt; select(poem_id, n_lines, punctuation_count, mentions_death, years_found, after_word_my_regexp) |&gt; head(10)\n\n# A tibble: 10 × 6\n   poem_id           n_lines punctuation_count mentions_death years_found\n   &lt;chr&gt;               &lt;int&gt;             &lt;int&gt; &lt;lgl&gt;          &lt;list&gt;     \n 1 gutenberg1.txt001      26                26 FALSE          &lt;chr [0]&gt;  \n 2 gutenberg1.txt002      15                13 FALSE          &lt;chr [0]&gt;  \n 3 gutenberg1.txt003      17                10 FALSE          &lt;chr [0]&gt;  \n 4 gutenberg1.txt004      28                35 TRUE           &lt;chr [0]&gt;  \n 5 gutenberg1.txt005      25                24 FALSE          &lt;chr [0]&gt;  \n 6 gutenberg1.txt006      13                 7 FALSE          &lt;chr [0]&gt;  \n 7 gutenberg1.txt007      17                10 FALSE          &lt;chr [0]&gt;  \n 8 gutenberg1.txt008      20                16 TRUE           &lt;chr [0]&gt;  \n 9 gutenberg1.txt009      15                11 TRUE           &lt;chr [0]&gt;  \n10 gutenberg1.txt010      42                30 FALSE          &lt;chr [0]&gt;  \n# ℹ 1 more variable: after_word_my_regexp &lt;chr&gt;\n\n\nThe above tibble is a sliced set of the poems dataframe, showing the first 10 poems after the text processing. Each row represents a single poem, identified by its poem ID. For the columns, poem_id is the unique identifier for each poem, n_lines the total number of lines in that poem, punctuation_count is the total number of punctuation marks in the poem (Dickinson used many punctuations in writing, especially dashes– I didn’t know how to specify the em-dash in r so I just did all punctuation), mentions_death is a Boolean that returns whether or not the poem contains death-related words (which I interpreted in death_regexp), years_found is a list containing any four-digit year-like patterns in the poem, and after_word_my_rgexp is the first word that follows “poem” in each poem, if present (using look behind, as Dickinson’s poems were often personal and invoked a lot of first-person pronouns)."
  },
  {
    "objectID": "Dickinson.html#plot-1-most-frequent-words",
    "href": "Dickinson.html#plot-1-most-frequent-words",
    "title": "Emily Dickinson Poems",
    "section": "Plot 1 – Most Frequent Words",
    "text": "Plot 1 – Most Frequent Words\n\nmost_used_words &lt;- tokenize |&gt;\n  count(words, sort = TRUE) |&gt;\n  slice_head(n = 10)\n\nmost_used_words |&gt;\n  ggplot(aes(x = reorder(words, n), y = n)) +\n  geom_col(fill = \"cornflowerblue\") +\n  geom_text(aes(label = n),\n            size = 3) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 Most Frequent Words in Emily Dickinson’s Poems\",\n    x = \"Word\",\n    y = \"Number of Times Used\"\n  ) +\n  theme_light()\n\n\n\n\n\n\n\n\nThe above plot is a horizontal bar graph that shows the top 10 most frequent words in Emily Dickinson’s Poems. “The” is the most frequent word, with 1878 uses, followed by “a” and “and” with 775 and 767 uses respectively. Next, “to” is listed at 656 observations. It’s interesting to note that the next most used word, “I”, is a pronoun, and the only pronoun on the top 10. With 615 uses, it shows that most of Dickinson’s poems are written from first-person perspective or express personal thought and feeling. The rest of the top 10 is “of”, “it”, “in”, “that”, and “is”, with 543, 371, 357, 354, and 329 uses. The list reflects an analysis made by the Oxford English Corpus of the 100 most common words in written English, with 8 of the 10 of Dickinson’s most used words (only is and it are not in the top 10) being in the top 10, and only 1 (is) not being in the top 100. Dickinson, despite her unconventional punctuation and themes, still drew from everyday common English. Her uniqueness and innovation is not in her word choice, but rather her arrangement of words to create a complex story– a poem. Her poetry is accessible, as it uses familiar words, yet is profoundly layered as she explores her own emotions, thoughts, and existential reflections."
  },
  {
    "objectID": "Dickinson.html#poem-length-vs.-punctuation-count",
    "href": "Dickinson.html#poem-length-vs.-punctuation-count",
    "title": "Emily Dickinson Poems",
    "section": "Poem Length vs. Punctuation Count",
    "text": "Poem Length vs. Punctuation Count\n\nggplot(poems, aes(x = n_lines, y = punctuation_count)) +\n  geom_point(alpha = 0.5, color = \"seagreen1\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +\n  labs(\n    title = \"Correlation Between Poem Length and Punctuation Count\",\n    x = \"Number of Lines in Poem\",\n    y = \"Frequency of Punctuation(s)\"\n  ) +\n  theme_light()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe above plot is scatter plot that displays the correlation between poem length and punctuation count. In theory, the more lines in a poem, the greater the frequency of punctuation. I decided to use a linear model (method = “lm”) as I believed that the number of lines in a poem should function as a direct explanation for the punctuation count in Dickinson’s poems. While the regression line shows a general upward trend, the data points reveal considerable variation, especially as poem length increases. Most frequently, the longer the poem, Dickinson will use more punctuation than the model predicts she would use. The variation could reflect her unconventional approach to grammar and poetic rhythm, which serve stylistically to contribute to the poem’s tone and emotion. Punctuation in a Dickinson work is not merely just a structural device, but a deliberate choice that reflects the aesthetic and elasticity of her poetry."
  },
  {
    "objectID": "Dickinson.html#narrative",
    "href": "Dickinson.html#narrative",
    "title": "Emily Dickinson Poems",
    "section": "Narrative",
    "text": "Narrative\nIn completing this project, I wanted to have a better understanding of Emily Dickinson’s poetic style through a computational lens. While her writing is intensely emotional and personal, known for its introspection and peculiar use of punctuation, it also displays a structural consistency with recurring themes. I wondered if these qualities could be reflected quantitatively through text analysis. By counting word frequency, I was able to explore Dickinson’s vocabulary– interestingly, the most common words in her poetry are simple, everyday English words like “the”, “a”, and “and”. It suggests to me that rather than complex diction, Dickinson’s poetry’s power comes from how she arranges her work to express profound meaning. The presence of “I” supports a common interpretation that her work is self-reflective and personal.\nThe regular expressions I designed further support my question. I tried to detect text from poems which reference words related to death, one of Dickinson’s most enduring themes, and extracted any year-like numbers that might situate her work temporally or support the theme of death and ending. By identifying words that followed “my”, I tried to trace personal/possessive language– all these textual patterns tell the story of how Emily Dickinson engaged with mortality, memory, limit, and subjectivity in her work."
  }
]